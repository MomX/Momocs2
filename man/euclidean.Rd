% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/geometry.R
\name{euclidean}
\alias{euclidean}
\alias{ed}
\alias{edi}
\alias{ed_pw}
\alias{ed_nearest}
\alias{ed_furthest}
\alias{ed_calliper}
\alias{ed_minrad}
\title{Euclidean distance helpers}
\usage{
ed(x, y)

edi(x, y, r = 0.5)

ed_pw(x, y)

ed_nearest(x, y)

ed_furthest(x, y)

ed_calliper(x)

ed_minrad(x)
}
\arguments{
\item{x, y}{\link{coo_single}, matrices or vectors of length 2 (when sensible)}

\item{r}{\code{numeric} how much of the distance \code{d(x -> y)} should we travel?}
}
\description{
A little tribe to help with euclidean distances calculations
}
\section{Functions}{
\itemize{
\item \code{ed}: calculates \strong{e}uclidean \strong{d}istance between two points

\item \code{edi}: calculates \strong{i}ntermediate position between two points

\item \code{ed_pw}: calculates \strong{p}air\strong{w}ise distances between two shapes

\item \code{ed_nearest}: calculates \strong{closest} point to y from x

\item \code{ed_furthest}: calculates \strong{furthest} point to y from x

\item \code{ed_calliper}: find \strong{calliper} (max pairwise ed) length

\item \code{ed_minrad}: find \strong{min}imal \strong{rad}ius (min dist to centroid)
}}

\examples{
x <- c(0, 0)
y <- c(1, 1)

ed(x, y) # sqrt(2)
edi(x, y, 0.25) # c(0.25, 0.25)

bot \%>\% dplyr::slice(1:2) \%>\% coo_sample(12)  \%>\% dplyr::pull(coo) -> b
ed_pw(b[[1]], b[[2]])
# checking
purrr::map_dbl(1:12, ~ed(b[[1]][.x, ], b[[2]][.x, ]))

bot \%>\% pick(1) \%>\% ed_nearest(c(0, 0))

# nearest and furthest points

set.seed(2329) # for the sake of reproducibility when building the pkg
foo <- tibble::tibble(x=runif(5), y=runif(5))
z <- c(0.5, 0.5)
plot(foo, pch="")
text(foo, labels=1:5)
points(z[1], z[2], col="red", pch=20)

(nearest <- ed_nearest(foo, z))
segments(z[1], z[2],
         as.numeric(foo[nearest$id, 1]), as.numeric(foo[nearest$id, 2]), col="blue")

(furthest <- ed_furthest(foo, z))
segments(z[1], z[2],
         as.numeric(foo[furthest$id, 1]), as.numeric(foo[furthest$id, 2]), col="red")


(calli <- ed_calliper(foo))
segments(as.numeric(foo[calli$ids[1], 1]), as.numeric(foo[calli$ids[1], 2]),
         as.numeric(foo[calli$ids[2], 1]), as.numeric(foo[calli$ids[2], 2]), col="green")


}
\seealso{
Other geometry: 
\code{\link{geometry}}
}
\concept{geometry}
