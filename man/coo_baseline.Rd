% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/coo_modifyers.R
\name{coo_baseline}
\alias{coo_baseline}
\title{Baseline shapes}
\usage{
coo_baseline(
  x,
  target1,
  target2,
  id1,
  id2,
  ldk1,
  ldk2,
  from_col,
  ldk_col,
  to_col,
  ...
)
}
\arguments{
\item{x}{\link{coo_single}, \link{coo_list} or \link{mom_tbl}}

\item{target1, target2}{\code{numeric} xy coordinates of target baseline}

\item{id1, id2}{\code{integer} which rows to use as points being registered}

\item{ldk1, ldk2}{\code{integer} which ldk represent the points being registered}

\item{from_col}{colnames from where to get the \link{coo_list}
and how to name the resulting one (only for \link{mom_tbl} method)}

\item{ldk_col}{column name to use for landmakrs}

\item{to_col}{colnames from where to get the \link{coo_list}
and how to name the resulting one (only for \link{mom_tbl} method)}

\item{...}{useless here}
}
\value{
a \link{coo_single}, \link{coo_list} or \link{mom_tbl}
}
\description{
Register shapes on new baseline, that is defines certain points,
to be on certain target points, that is homogeneizes for scale, rotation and position.
}
\note{
todo review
}
\examples{
# default target1 and target2
# are Bookstein coordinates
bot \%>\% pick(1) \%>\%
  coo_center \%>\% coo_align \%>\% coo_up() \%>\%
  coo_baseline() \%>\% gg()

hearts \%>\%
dplyr::slice(1:5) \%>\%
  dplyr::rename(foo=ldk) \%>\%
  coo_baseline(ldk1=2, ldk2=4,
    target1=c(-10, 0), target2=c(20, 0),
    ldk_col=foo) \%>\%
    coo_slide(ldk=4, ldk_col=foo) \%>\%
 pile(alpha=0.1)
}
\seealso{
Other coo_modifyers: 
\code{\link{coo_align}()},
\code{\link{coo_center}()},
\code{\link{coo_reflect}},
\code{\link{coo_rev}()},
\code{\link{coo_rotatecenter}()},
\code{\link{coo_rotate}()},
\code{\link{coo_sample_rr}()},
\code{\link{coo_sample}()},
\code{\link{coo_scale}()},
\code{\link{coo_shear}()},
\code{\link{coo_slide}()},
\code{\link{coo_split}()},
\code{\link{coo_template}()},
\code{\link{coo_trans}()},
\code{\link{coo_trim}()},
\code{\link{coo_up}()}
}
\concept{coo_modifyers}
